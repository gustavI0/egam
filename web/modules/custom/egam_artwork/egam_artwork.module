<?php declare(strict_types = 1);

/**
 * @file
 * Provides an artwork entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\egam_artist\Entity\ArtistInterface;
use Drupal\egam_global\Entities;
use Drupal\egam_global\Handler\RelatedContentHandler;
use Drupal\egam_global\Service\ContextManager;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function egam_artwork_theme(): array {
  return [
    'artwork' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for artwork templates.
 *
 * Default template: artwork.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the artwork information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_artwork(array &$variables): void {
  $variables['view_mode'] = $viewMode = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
	/* @var \Drupal\egam_artwork\ArtworkInterface $artwork */
	$artwork = $variables['elements']['#artwork'];
	if ($viewMode == 'full') {
		$variables['full_artist'] = $artwork->getFullArtist(TRUE);
		$variables['full_location_link'] = $artwork->getFullLocationAsLink();
	}
	if ($viewMode == 'teaser') {
		$contextManager = ContextManager::me();
		$contextEntity = $contextManager->getContext();
		$variables['full_title'] = $contextEntity instanceof ArtistInterface ? $artwork->getFullTitle(FALSE) : $artwork->getFullTitle();
		$variables['#cache']['contexts'][] = 'url';
	}
}

/**
 * Implements hook_user_cancel().
 */
function egam_artwork_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish artworks.
      $storage = \Drupal::entityTypeManager()->getStorage('artwork');
      $artwork_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($artwork_ids) as $artwork) {
        $artwork->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize artworks.
      $storage = \Drupal::entityTypeManager()->getStorage('artwork');
      $artwork_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($artwork_ids) as $artwork) {
        $artwork->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function egam_artwork_user_predelete(UserInterface $account): void {
  // Delete artworks that belong to this account.
	/** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage('artwork');
  $artwork_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($artwork_ids)
  );
  // Delete old revisions.
  $artwork_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach (array_keys($artwork_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
}

/**
 * Implements hook_preprocess().
 */
function egam_artwork_preprocess_artwork(&$variables) {
	if ($variables['view_mode'] == 'full') {
		/* @var \Drupal\egam_artwork\ArtworkInterface $artwork */
		$artwork = $variables['elements']['#artwork'];
		$relatedContentHandler = RelatedContentHandler::me();
		$variables['related_games'] = $relatedContentHandler->viewContent($artwork, Entities::Screenshot);
		if (!empty($variables['related_games'])) {
			$variables['multiple_content'] = $relatedContentHandler->hasMultipleRelatedContent;
		}
	}
}