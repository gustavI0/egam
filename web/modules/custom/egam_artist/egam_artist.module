<?php declare(strict_types = 1);

/**
 * @file
 * Provides an artist entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\egam_global\Entities;
use Drupal\egam_global\Handler\RelatedContentHandler;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function egam_artist_theme(): array {
  return [
    'artist' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for artist templates.
 *
 * Default template: artist.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the artist information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_artist(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function egam_artist_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish artists.
      $storage = \Drupal::entityTypeManager()->getStorage('artist');
      $artist_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($artist_ids) as $artist) {
        $artist->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize artists.
      $storage = \Drupal::entityTypeManager()->getStorage('artist');
      $artist_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($artist_ids) as $artist) {
        $artist->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function egam_artist_user_predelete(UserInterface $account): void {
  // Delete artists that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('artist');
  $artist_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($artist_ids)
  );
  // Delete old revisions.
  $artist_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach (array_keys($artist_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
}

/**
 * Implements hook_preprocess().
 */
function egam_artist_preprocess_artist(&$variables, $hook) {
	/* @var \Drupal\egam_artist\Entity\ArtistInterface $artist */
	$artist = $variables['elements']['#artist'];
	$relatedContentHandler = RelatedContentHandler::me();
	$variables['related_artworks'] = $relatedContentHandler->viewRelatedContent($artist, Entities::Artwork);
//	$variables['multiple_related_content'] = $relatedContentHandler->;
}
